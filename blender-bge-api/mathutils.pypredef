'''This module provides access to matrices, eulers, quaternions and vectors.'''

class Color:
	'''This object gives access to Colors in Blender.'''

	b = getset_descriptor
	'''This object gives access to Colors in Blender.'''

	def copy(*argv):
		'''.. function:: copy()

Returns a copy of this color.

:return: A copy of the color.
:rtype: :class:`Color`

.. note:: use this to get a copy of a wrapped color with no reference to the original data.'''

	g = getset_descriptor
	'''This object gives access to Colors in Blender.'''

	h = getset_descriptor
	'''This object gives access to Colors in Blender.'''

	hsv = getset_descriptor
	'''This object gives access to Colors in Blender.'''

	is_wrapped = getset_descriptor
	'''This object gives access to Colors in Blender.'''

	owner = getset_descriptor
	'''This object gives access to Colors in Blender.'''

	r = getset_descriptor
	'''This object gives access to Colors in Blender.'''

	s = getset_descriptor
	'''This object gives access to Colors in Blender.'''

	v = getset_descriptor
	'''This object gives access to Colors in Blender.'''


class Euler:
	'''This object gives access to Eulers in Blender.'''

	def copy(*argv):
		'''.. function:: copy()

Returns a copy of this euler.

:return: A copy of the euler.
:rtype: :class:`Euler`

.. note:: use this to get a copy of a wrapped euler with no reference to the original data.'''

	is_wrapped = getset_descriptor
	'''This object gives access to Eulers in Blender.'''

	def make_compatible(*argv):
		'''.. method:: make_compatible(other)

Make this euler compatible with another, so interpolating between them works as intended.

:arg other: make compatible with this rotation.
:type other: :class:`Euler`
:return: an instance of itself.
:rtype: :class:`Euler`

.. note:: the order of eulers must match or an exception is raised.'''

	order = getset_descriptor
	'''This object gives access to Eulers in Blender.'''

	owner = getset_descriptor
	'''This object gives access to Eulers in Blender.'''

	def rotate_axis(*argv):
		'''.. method:: rotate_axis(axis, angle)

Rotates the euler a certain amount and returning a unique euler rotation (no 720 degree pitches).

:arg axis: single character in ['X, 'Y', 'Z'].
:type axis: string
:arg angle: angle in radians.
:type angle: float
:return: an instance of itself
:rtype: :class:`Euler`'''

	def to_matrix(*argv):
		'''.. method:: to_matrix()

Return a matrix representation of the euler.

:return: A 3x3 roation matrix representation of the euler.
:rtype: :class:`Matrix`'''

	def to_quat(*argv):
		'''.. method:: to_quat()

Return a quaternion representation of the euler.

:return: Quaternion representation of the euler.
:rtype: :class:`Quaternion`'''

	def unique(*argv):
		'''.. method:: unique()

Calculate a unique rotation for this euler. Avoids gimble lock.

:return: an instance of itself
:rtype: :class:`Euler`'''

	x = getset_descriptor
	'''This object gives access to Eulers in Blender.'''

	y = getset_descriptor
	'''This object gives access to Eulers in Blender.'''

	z = getset_descriptor
	'''This object gives access to Eulers in Blender.'''

	def zero(*argv):
		'''.. method:: zero()

Set all values to zero.

:return: an instance of itself
:rtype: :class:`Euler`'''


class Matrix:
	'''This object gives access to Matrices in Blender.'''

	def OrthoProjection(*argv):
		'''.. classmethod:: OrthoProjection(plane, size, axis)

Create a matrix to represent an orthographic projection.

:arg plane: Can be any of the following: ['X', 'Y', 'XY', 'XZ', 'YZ', 'R'], where a single axis is for a 2D matrix and 'R' requires axis is given.
:type plane: string
:arg size: The size of the projection matrix to construct [2, 4].
:type size: int
:arg axis: Arbitrary perpendicular plane vector (optional).
:type axis: :class:`Vector`
:return: A new projection matrix.
:rtype: :class:`Matrix`'''

	def Rotation(*argv):
		'''.. classmethod:: Rotation(angle, size, axis)

Create a matrix representing a rotation.

:arg angle: The angle of rotation desired, in radians.
:type angle: float
:arg size: The size of the rotation matrix to construct [2, 4].
:type size: int
:arg axis: a string in ['X', 'Y', 'Z'] or a 3D Vector Object (optional when size is 2).
:type axis: string or :class:`Vector`
:return: A new rotation matrix.
:rtype: :class:`Matrix`'''

	def Scale(*argv):
		'''.. classmethod:: Scale(factor, size, axis)

Create a matrix representing a scaling.

:arg factor: The factor of scaling to apply.
:type factor: float
:arg size: The size of the scale matrix to construct [2, 4].
:type size: int
:arg axis: Direction to influence scale. (optional).
:type axis: :class:`Vector`
:return: A new scale matrix.
:rtype: :class:`Matrix`'''

	def Shear(*argv):
		'''.. classmethod:: Shear(plane, factor, size)

Create a matrix to represent an shear transformation.

:arg plane: Can be any of the following: ['X', 'Y', 'XY', 'XZ', 'YZ'], where a single axis is for a 2D matrix.
:type plane: string
:arg factor: The factor of shear to apply.
:type factor: float
:arg size: The size of the shear matrix to construct [2, 4].
:type size: int
:return: A new shear matrix.
:rtype: :class:`Matrix`'''

	def Translation(*argv):
		'''.. classmethod:: Translation(vector)

Create a matrix representing a translation.

:arg vector: The translation vector.
:type vector: :class:`Vector`
:return: An identity matrix with a translation.
:rtype: :class:`Matrix`'''

	col_size = getset_descriptor
	'''This object gives access to Matrices in Blender.'''

	def copy(*argv):
		'''.. method:: copy()

Returns a copy of this matrix.

:return: an instance of itself
:rtype: :class:`Matrix`'''

	def decompose(*argv):
		'''.. method:: decompose()

Return the location, rotaion and scale components of this matrix.

:return: loc, rot, scale triple.
:rtype: (:class:`Vector`, :class:`Quaternion`, :class:`Vector`)'''

	def determinant(*argv):
		'''.. method:: determinant()

Return the determinant of a matrix.

:return: Return a the determinant of a matrix.
:rtype: float

.. seealso:: <http://en.wikipedia.org/wiki/Determinant>'''

	def identity(*argv):
		'''.. method:: identity()

Set the matrix to the identity matrix.

:return: an instance of itself
:rtype: :class:`Matrix`

.. note:: An object with zero location and rotation, a scale of one, will have an identity matrix.

.. seealso:: <http://en.wikipedia.org/wiki/Identity_matrix>'''

	def invert(*argv):
		'''.. method:: invert()

Set the matrix to its inverse.

:return: an instance of itself.
:rtype: :class:`Matrix`

.. note:: :exc:`ValueError` exception is raised.

.. seealso:: <http://en.wikipedia.org/wiki/Inverse_matrix>'''

	is_negative = getset_descriptor
	'''This object gives access to Matrices in Blender.'''

	is_wrapped = getset_descriptor
	'''This object gives access to Matrices in Blender.'''

	def lerp(*argv):
		'''.. function:: lerp(other, factor)

Returns the interpolation of two matricies.

:arg other: value to interpolate with.
:type other: :class:`Matrix`
:arg factor: The interpolation value in [0.0, 1.0].
:type factor: float
:return: The interpolated rotation.
:rtype: :class:`Matrix`'''

	median_scale = getset_descriptor
	'''This object gives access to Matrices in Blender.'''

	owner = getset_descriptor
	'''This object gives access to Matrices in Blender.'''

	def resize4x4(*argv):
		'''.. method:: resize4x4()

Resize the matrix to 4x4.

:return: an instance of itself.
:rtype: :class:`Matrix`'''

	def rotation_part(*argv):
		'''.. method:: rotation_part()

Return the 3d submatrix corresponding to the linear term of the embedded affine transformation in 3d. This matrix represents rotation and scale.

:return: Return the 3d matrix for rotation and scale.
:rtype: :class:`Matrix`

.. note:: Note that the (4,4) element of a matrix can be used for uniform scaling too.'''

	row_size = getset_descriptor
	'''This object gives access to Matrices in Blender.'''

	def scale_part(*argv):
		'''.. method:: scale_part()

Return a the scale part of a 3x3 or 4x4 matrix.

:return: Return a the scale of a matrix.
:rtype: :class:`Vector`

.. note:: This method does not return negative a scale on any axis because it is not possible to obtain this data from the matrix alone.'''

	def to_3x3(*argv):
		'''.. method:: to_3x3()

Return a 3x3 copy of this matrix.

:return: a new matrix.
:rtype: :class:`Matrix`'''

	def to_4x4(*argv):
		'''.. method:: to_4x4()

Return a 4x4 copy of this matrix.

:return: a new matrix.
:rtype: :class:`Matrix`'''

	def to_euler(*argv):
		'''.. method:: to_euler(order, euler_compat)

Return an Euler representation of the rotation matrix (3x3 or 4x4 matrix only).

:arg order: Optional rotation order argument in ['XYZ', 'XZY', 'YXZ', 'YZX', 'ZXY', 'ZYX'].
:type order: string
:arg euler_compat: Optional euler argument the new euler will be made compatible with (no axis flipping between them). Useful for converting a series of matrices to animation curves.
:type euler_compat: :class:`Euler`
:return: Euler representation of the matrix.
:rtype: :class:`Euler`'''

	def to_quat(*argv):
		'''.. method:: to_quat()

Return a quaternion representation of the rotation matrix.

:return: Quaternion representation of the rotation matrix.
:rtype: :class:`Quaternion`'''

	def translation_part(*argv):
		'''.. method:: translation_part()

Return a the translation part of a 4 row matrix.

:return: Return a the translation of a matrix.
:rtype: :class:`Matrix`

.. note:: Note that the (4,4) element of a matrix can be used for uniform scaling too.'''

	def transpose(*argv):
		'''.. method:: transpose()

Set the matrix to its transpose.

:return: an instance of itself
:rtype: :class:`Matrix`

.. seealso:: <http://en.wikipedia.org/wiki/Transpose>'''

	def zero(*argv):
		'''.. method:: zero()

Set all the matrix values to zero.

:return: an instance of itself
:rtype: :class:`Matrix`'''


class Quaternion:
	'''This object gives access to Quaternions in Blender.'''

	angle = getset_descriptor
	'''This object gives access to Quaternions in Blender.'''

	axis = getset_descriptor
	'''This object gives access to Quaternions in Blender.'''

	def conjugate(*argv):
		'''.. function:: conjugate()

Set the quaternion to its conjugate (negate x, y, z).

:return: an instance of itself.
:rtype: :class:`Quaternion`'''

	def copy(*argv):
		'''.. function:: copy()

Returns a copy of this quaternion.

:return: A copy of the quaternion.
:rtype: :class:`Quaternion`

.. note:: use this to get a copy of a wrapped quaternion with no reference to the original data.'''

	def cross(*argv):
		'''.. method:: cross(other)

Return the cross product of this quaternion and another.

:arg other: The other quaternion to perform the cross product with.
:type other: :class:`Quaternion`
:return: The cross product.
:rtype: :class:`Quaternion`'''

	def difference(*argv):
		'''.. function:: difference(other)

Returns a quaternion representing the rotational difference.

:arg other: second quaternion.
:type other: :class:`Quaternion`
:return: the rotational difference between the two quat rotations.
:rtype: :class:`Quaternion`'''

	def dot(*argv):
		'''.. method:: dot(other)

Return the dot product of this quaternion and another.

:arg other: The other quaternion to perform the dot product with.
:type other: :class:`Quaternion`
:return: The dot product.
:rtype: :class:`Quaternion`'''

	def identity(*argv):
		'''.. function:: identity()

Set the quaternion to an identity quaternion.

:return: an instance of itself.
:rtype: :class:`Quaternion`'''

	def inverse(*argv):
		'''.. function:: inverse()

Set the quaternion to its inverse.

:return: an instance of itself.
:rtype: :class:`Quaternion`'''

	is_wrapped = getset_descriptor
	'''This object gives access to Quaternions in Blender.'''

	magnitude = getset_descriptor
	'''This object gives access to Quaternions in Blender.'''

	def negate(*argv):
		'''.. function:: negate()

Set the quaternion to its negative.

:return: an instance of itself.
:rtype: :class:`Quaternion`'''

	def normalize(*argv):
		'''.. function:: normalize()

Normalize the quaternion.

:return: an instance of itself.
:rtype: :class:`Quaternion`'''

	owner = getset_descriptor
	'''This object gives access to Quaternions in Blender.'''

	def slerp(*argv):
		'''.. function:: slerp(other, factor)

Returns the interpolation of two quaternions.

:arg other: value to interpolate with.
:type other: :class:`Quaternion`
:arg factor: The interpolation value in [0.0, 1.0].
:type factor: float
:return: The interpolated rotation.
:rtype: :class:`Quaternion`'''

	def to_euler(*argv):
		'''.. method:: to_euler(order, euler_compat)

Return Euler representation of the quaternion.

:arg order: Optional rotation order argument in ['XYZ', 'XZY', 'YXZ', 'YZX', 'ZXY', 'ZYX'].
:type order: string
:arg euler_compat: Optional euler argument the new euler will be made compatible with (no axis flipping between them). Useful for converting a series of matrices to animation curves.
:type euler_compat: :class:`Euler`
:return: Euler representation of the quaternion.
:rtype: :class:`Euler`'''

	def to_matrix(*argv):
		'''.. method:: to_matrix()

Return a matrix representation of the quaternion.

:return: A 3x3 rotation matrix representation of the quaternion.
:rtype: :class:`Matrix`'''

	w = getset_descriptor
	'''This object gives access to Quaternions in Blender.'''

	x = getset_descriptor
	'''This object gives access to Quaternions in Blender.'''

	y = getset_descriptor
	'''This object gives access to Quaternions in Blender.'''

	z = getset_descriptor
	'''This object gives access to Quaternions in Blender.'''


class Vector:
	'''This object gives access to Vectors in Blender.'''

	def angle(*argv):
		'''.. function:: angle(other, fallback)

Return the angle between two vectors.

:arg other: another vector to compare the angle with
:type other: :class:`Vector`
:arg fallback: return this value when the angle cant be calculated (zero length vector)
:type fallback: any
:return: angle in radians or fallback when given
:rtype: float

.. note:: Zero length vectors raise an :exc:`AttributeError`.'''

	def copy(*argv):
		'''.. function:: copy()

Returns a copy of this vector.

:return: A copy of the vector.
:rtype: :class:`Vector`

.. note:: use this to get a copy of a wrapped vector with no reference to the original data.'''

	def cross(*argv):
		'''.. method:: cross(other)

Return the cross product of this vector and another.

:arg other: The other vector to perform the cross product with.
:type other: :class:`Vector`
:return: The cross product.
:rtype: :class:`Vector`

.. note:: both vectors must be 3D'''

	def difference(*argv):
		'''.. function:: difference(other)

Returns a quaternion representing the rotational difference between this vector and another.

:arg other: second vector.
:type other: :class:`Vector`
:return: the rotational difference between the two vectors.
:rtype: :class:`Quaternion`

.. note:: 2D vectors raise an :exc:`AttributeError`.'''

	def dot(*argv):
		'''.. method:: dot(other)

Return the dot product of this vector and another.

:arg other: The other vector to perform the dot product with.
:type other: :class:`Vector`
:return: The dot product.
:rtype: :class:`Vector`'''

	is_wrapped = getset_descriptor
	'''This object gives access to Vectors in Blender.'''

	length = getset_descriptor
	'''This object gives access to Vectors in Blender.'''

	def lerp(*argv):
		'''.. function:: lerp(other, factor)

Returns the interpolation of two vectors.

:arg other: value to interpolate with.
:type other: :class:`Vector`
:arg factor: The interpolation value in [0.0, 1.0].
:type factor: float
:return: The interpolated rotation.
:rtype: :class:`Vector`'''

	magnitude = getset_descriptor
	'''This object gives access to Vectors in Blender.'''

	def negate(*argv):
		'''.. method:: negate()

Set all values to their negative.

:return: an instance of itself
:rtype: :class:`Vector`'''

	def normalize(*argv):
		'''.. method:: normalize()

Normalize the vector, making the length of the vector always 1.0.

:return: an instance of itself
:rtype: :class:`Vector`

.. warning:: Normalizing a vector where all values are zero results in all axis having a nan value (not a number).

.. note:: Normalize works for vectors of all sizes, however 4D Vectors w axis is left untouched.'''

	owner = getset_descriptor
	'''This object gives access to Vectors in Blender.'''

	def project(*argv):
		'''.. function:: project(other)

Return the projection of this vector onto the *other*.

:arg other: second vector.
:type other: :class:`Vector`
:return: the parallel projection vector
:rtype: :class:`Vector`'''

	def reflect(*argv):
		'''.. method:: reflect(mirror)

Return the reflection vector from the *mirror* argument.

:arg mirror: This vector could be a normal from the reflecting surface.
:type mirror: :class:`Vector`
:return: The reflected vector matching the size of this vector.
:rtype: :class:`Vector`'''

	def resize2D(*argv):
		'''.. method:: resize2D()

Resize the vector to 2D  (x, y).

:return: an instance of itself
:rtype: :class:`Vector`'''

	def resize3D(*argv):
		'''.. method:: resize3D()

Resize the vector to 3D  (x, y, z).

:return: an instance of itself
:rtype: :class:`Vector`'''

	def resize4D(*argv):
		'''.. method:: resize4D()

Resize the vector to 4D (x, y, z, w).

:return: an instance of itself
:rtype: :class:`Vector`'''

	def rotate(*argv):
		'''.. function:: rotate(axis, angle)

Return vector rotated around axis by angle.

:arg axis: rotation axis.
:type axis: :class:`Vector`
:arg angle: angle in radians.
:type angle: float
:return: an instance of itself
:rtype: :class:`Vector`'''

	def to_track_quat(*argv):
		'''.. method:: to_track_quat(track, up)

Return a quaternion rotation from the vector and the track and up axis.

:arg track: Track axis in ['X', 'Y', 'Z', '-X', '-Y', '-Z'].
:type track: string
:arg up: Up axis in ['X', 'Y', 'Z'].
:type up: string
:return: rotation from the vector and the track and up axis.
:rtype: :class:`Quaternion`'''

	def to_tuple(*argv):
		'''.. method:: to_tuple(precision=-1)

Return this vector as a tuple with.

:arg precision: The number to round the value to in [-1, 21].
:type precision: int
:return: the values of the vector rounded by *precision*
:rtype: tuple'''

	w = getset_descriptor
	'''This object gives access to Vectors in Blender.'''

	ww = getset_descriptor
	www = getset_descriptor
	wwww = getset_descriptor
	wwwx = getset_descriptor
	wwwy = getset_descriptor
	wwwz = getset_descriptor
	wwx = getset_descriptor
	wwxw = getset_descriptor
	wwxx = getset_descriptor
	wwxy = getset_descriptor
	wwxz = getset_descriptor
	wwy = getset_descriptor
	wwyw = getset_descriptor
	wwyx = getset_descriptor
	wwyy = getset_descriptor
	wwyz = getset_descriptor
	wwz = getset_descriptor
	wwzw = getset_descriptor
	wwzx = getset_descriptor
	wwzy = getset_descriptor
	wwzz = getset_descriptor
	wx = getset_descriptor
	wxw = getset_descriptor
	wxww = getset_descriptor
	wxwx = getset_descriptor
	wxwy = getset_descriptor
	wxwz = getset_descriptor
	wxx = getset_descriptor
	wxxw = getset_descriptor
	wxxx = getset_descriptor
	wxxy = getset_descriptor
	wxxz = getset_descriptor
	wxy = getset_descriptor
	wxyw = getset_descriptor
	wxyx = getset_descriptor
	wxyy = getset_descriptor
	wxyz = getset_descriptor
	wxz = getset_descriptor
	wxzw = getset_descriptor
	wxzx = getset_descriptor
	wxzy = getset_descriptor
	wxzz = getset_descriptor
	wy = getset_descriptor
	wyw = getset_descriptor
	wyww = getset_descriptor
	wywx = getset_descriptor
	wywy = getset_descriptor
	wywz = getset_descriptor
	wyx = getset_descriptor
	wyxw = getset_descriptor
	wyxx = getset_descriptor
	wyxy = getset_descriptor
	wyxz = getset_descriptor
	wyy = getset_descriptor
	wyyw = getset_descriptor
	wyyx = getset_descriptor
	wyyy = getset_descriptor
	wyyz = getset_descriptor
	wyz = getset_descriptor
	wyzw = getset_descriptor
	wyzx = getset_descriptor
	wyzy = getset_descriptor
	wyzz = getset_descriptor
	wz = getset_descriptor
	wzw = getset_descriptor
	wzww = getset_descriptor
	wzwx = getset_descriptor
	wzwy = getset_descriptor
	wzwz = getset_descriptor
	wzx = getset_descriptor
	wzxw = getset_descriptor
	wzxx = getset_descriptor
	wzxy = getset_descriptor
	wzxz = getset_descriptor
	wzy = getset_descriptor
	wzyw = getset_descriptor
	wzyx = getset_descriptor
	wzyy = getset_descriptor
	wzyz = getset_descriptor
	wzz = getset_descriptor
	wzzw = getset_descriptor
	wzzx = getset_descriptor
	wzzy = getset_descriptor
	wzzz = getset_descriptor
	x = getset_descriptor
	'''This object gives access to Vectors in Blender.'''

	xw = getset_descriptor
	xww = getset_descriptor
	xwww = getset_descriptor
	xwwx = getset_descriptor
	xwwy = getset_descriptor
	xwwz = getset_descriptor
	xwx = getset_descriptor
	xwxw = getset_descriptor
	xwxx = getset_descriptor
	xwxy = getset_descriptor
	xwxz = getset_descriptor
	xwy = getset_descriptor
	xwyw = getset_descriptor
	xwyx = getset_descriptor
	xwyy = getset_descriptor
	xwyz = getset_descriptor
	xwz = getset_descriptor
	xwzw = getset_descriptor
	xwzx = getset_descriptor
	xwzy = getset_descriptor
	xwzz = getset_descriptor
	xx = getset_descriptor
	xxw = getset_descriptor
	xxww = getset_descriptor
	xxwx = getset_descriptor
	xxwy = getset_descriptor
	xxwz = getset_descriptor
	xxx = getset_descriptor
	xxxw = getset_descriptor
	xxxx = getset_descriptor
	xxxy = getset_descriptor
	xxxz = getset_descriptor
	xxy = getset_descriptor
	xxyw = getset_descriptor
	xxyx = getset_descriptor
	xxyy = getset_descriptor
	xxyz = getset_descriptor
	xxz = getset_descriptor
	xxzw = getset_descriptor
	xxzx = getset_descriptor
	xxzy = getset_descriptor
	xxzz = getset_descriptor
	xy = getset_descriptor
	xyw = getset_descriptor
	xyww = getset_descriptor
	xywx = getset_descriptor
	xywy = getset_descriptor
	xywz = getset_descriptor
	xyx = getset_descriptor
	xyxw = getset_descriptor
	xyxx = getset_descriptor
	xyxy = getset_descriptor
	xyxz = getset_descriptor
	xyy = getset_descriptor
	xyyw = getset_descriptor
	xyyx = getset_descriptor
	xyyy = getset_descriptor
	xyyz = getset_descriptor
	xyz = getset_descriptor
	xyzw = getset_descriptor
	xyzx = getset_descriptor
	xyzy = getset_descriptor
	xyzz = getset_descriptor
	xz = getset_descriptor
	xzw = getset_descriptor
	xzww = getset_descriptor
	xzwx = getset_descriptor
	xzwy = getset_descriptor
	xzwz = getset_descriptor
	xzx = getset_descriptor
	xzxw = getset_descriptor
	xzxx = getset_descriptor
	xzxy = getset_descriptor
	xzxz = getset_descriptor
	xzy = getset_descriptor
	xzyw = getset_descriptor
	xzyx = getset_descriptor
	xzyy = getset_descriptor
	xzyz = getset_descriptor
	xzz = getset_descriptor
	xzzw = getset_descriptor
	xzzx = getset_descriptor
	xzzy = getset_descriptor
	xzzz = getset_descriptor
	y = getset_descriptor
	'''This object gives access to Vectors in Blender.'''

	yw = getset_descriptor
	yww = getset_descriptor
	ywww = getset_descriptor
	ywwx = getset_descriptor
	ywwy = getset_descriptor
	ywwz = getset_descriptor
	ywx = getset_descriptor
	ywxw = getset_descriptor
	ywxx = getset_descriptor
	ywxy = getset_descriptor
	ywxz = getset_descriptor
	ywy = getset_descriptor
	ywyw = getset_descriptor
	ywyx = getset_descriptor
	ywyy = getset_descriptor
	ywyz = getset_descriptor
	ywz = getset_descriptor
	ywzw = getset_descriptor
	ywzx = getset_descriptor
	ywzy = getset_descriptor
	ywzz = getset_descriptor
	yx = getset_descriptor
	yxw = getset_descriptor
	yxww = getset_descriptor
	yxwx = getset_descriptor
	yxwy = getset_descriptor
	yxwz = getset_descriptor
	yxx = getset_descriptor
	yxxw = getset_descriptor
	yxxx = getset_descriptor
	yxxy = getset_descriptor
	yxxz = getset_descriptor
	yxy = getset_descriptor
	yxyw = getset_descriptor
	yxyx = getset_descriptor
	yxyy = getset_descriptor
	yxyz = getset_descriptor
	yxz = getset_descriptor
	yxzw = getset_descriptor
	yxzx = getset_descriptor
	yxzy = getset_descriptor
	yxzz = getset_descriptor
	yy = getset_descriptor
	yyw = getset_descriptor
	yyww = getset_descriptor
	yywx = getset_descriptor
	yywy = getset_descriptor
	yywz = getset_descriptor
	yyx = getset_descriptor
	yyxw = getset_descriptor
	yyxx = getset_descriptor
	yyxy = getset_descriptor
	yyxz = getset_descriptor
	yyy = getset_descriptor
	yyyw = getset_descriptor
	yyyx = getset_descriptor
	yyyy = getset_descriptor
	yyyz = getset_descriptor
	yyz = getset_descriptor
	yyzw = getset_descriptor
	yyzx = getset_descriptor
	yyzy = getset_descriptor
	yyzz = getset_descriptor
	yz = getset_descriptor
	yzw = getset_descriptor
	yzww = getset_descriptor
	yzwx = getset_descriptor
	yzwy = getset_descriptor
	yzwz = getset_descriptor
	yzx = getset_descriptor
	yzxw = getset_descriptor
	yzxx = getset_descriptor
	yzxy = getset_descriptor
	yzxz = getset_descriptor
	yzy = getset_descriptor
	yzyw = getset_descriptor
	yzyx = getset_descriptor
	yzyy = getset_descriptor
	yzyz = getset_descriptor
	yzz = getset_descriptor
	yzzw = getset_descriptor
	yzzx = getset_descriptor
	yzzy = getset_descriptor
	yzzz = getset_descriptor
	z = getset_descriptor
	'''This object gives access to Vectors in Blender.'''

	def zero(*argv):
		'''.. method:: zero()

Set all values to zero.

:return: an instance of itself
:rtype: :class:`Vector`'''

	zw = getset_descriptor
	zww = getset_descriptor
	zwww = getset_descriptor
	zwwx = getset_descriptor
	zwwy = getset_descriptor
	zwwz = getset_descriptor
	zwx = getset_descriptor
	zwxw = getset_descriptor
	zwxx = getset_descriptor
	zwxy = getset_descriptor
	zwxz = getset_descriptor
	zwy = getset_descriptor
	zwyw = getset_descriptor
	zwyx = getset_descriptor
	zwyy = getset_descriptor
	zwyz = getset_descriptor
	zwz = getset_descriptor
	zwzw = getset_descriptor
	zwzx = getset_descriptor
	zwzy = getset_descriptor
	zwzz = getset_descriptor
	zx = getset_descriptor
	zxw = getset_descriptor
	zxww = getset_descriptor
	zxwx = getset_descriptor
	zxwy = getset_descriptor
	zxwz = getset_descriptor
	zxx = getset_descriptor
	zxxw = getset_descriptor
	zxxx = getset_descriptor
	zxxy = getset_descriptor
	zxxz = getset_descriptor
	zxy = getset_descriptor
	zxyw = getset_descriptor
	zxyx = getset_descriptor
	zxyy = getset_descriptor
	zxyz = getset_descriptor
	zxz = getset_descriptor
	zxzw = getset_descriptor
	zxzx = getset_descriptor
	zxzy = getset_descriptor
	zxzz = getset_descriptor
	zy = getset_descriptor
	zyw = getset_descriptor
	zyww = getset_descriptor
	zywx = getset_descriptor
	zywy = getset_descriptor
	zywz = getset_descriptor
	zyx = getset_descriptor
	zyxw = getset_descriptor
	zyxx = getset_descriptor
	zyxy = getset_descriptor
	zyxz = getset_descriptor
	zyy = getset_descriptor
	zyyw = getset_descriptor
	zyyx = getset_descriptor
	zyyy = getset_descriptor
	zyyz = getset_descriptor
	zyz = getset_descriptor
	zyzw = getset_descriptor
	zyzx = getset_descriptor
	zyzy = getset_descriptor
	zyzz = getset_descriptor
	zz = getset_descriptor
	zzw = getset_descriptor
	zzww = getset_descriptor
	zzwx = getset_descriptor
	zzwy = getset_descriptor
	zzwz = getset_descriptor
	zzx = getset_descriptor
	zzxw = getset_descriptor
	zzxx = getset_descriptor
	zzxy = getset_descriptor
	zzxz = getset_descriptor
	zzy = getset_descriptor
	zzyw = getset_descriptor
	zzyx = getset_descriptor
	zzyy = getset_descriptor
	zzyz = getset_descriptor
	zzz = getset_descriptor
	zzzw = getset_descriptor
	zzzx = getset_descriptor
	zzzy = getset_descriptor
	zzzz = getset_descriptor

import geometry

