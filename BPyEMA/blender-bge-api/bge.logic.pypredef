'''This is the Python API for the game engine of bge.logic'''

BL_DST_ALPHA = int
BL_DST_COLOR = int
BL_ONE = int
BL_ONE_MINUS_DST_ALPHA = int
BL_ONE_MINUS_DST_COLOR = int
BL_ONE_MINUS_SRC_ALPHA = int
BL_ONE_MINUS_SRC_COLOR = int
BL_SRC_ALPHA = int
BL_SRC_ALPHA_SATURATE = int
BL_SRC_COLOR = int
BL_ZERO = int
CAM_POS = int
CONSTANT_TIMER = int
CONSTRAINT_IK_COPYPOSE = int
CONSTRAINT_IK_DISTANCE = int
CONSTRAINT_IK_FLAG_POS = int
CONSTRAINT_IK_FLAG_ROT = int
CONSTRAINT_IK_FLAG_STRETCH = int
CONSTRAINT_IK_FLAG_TIP = int
CONSTRAINT_IK_MODE_INSIDE = int
CONSTRAINT_IK_MODE_ONSURFACE = int
CONSTRAINT_IK_MODE_OUTSIDE = int
CONSTRAINT_TYPE_CLAMPTO = int
CONSTRAINT_TYPE_DISTLIMIT = int
CONSTRAINT_TYPE_KINEMATIC = int
CONSTRAINT_TYPE_LOCKTRACK = int
CONSTRAINT_TYPE_LOCLIKE = int
CONSTRAINT_TYPE_MINMAX = int
CONSTRAINT_TYPE_ROTLIKE = int
CONSTRAINT_TYPE_SIZELIKE = int
CONSTRAINT_TYPE_STRETCHTO = int
CONSTRAINT_TYPE_TRACKTO = int
CONSTRAINT_TYPE_TRANSFORM = int
KX_ACTIONACT_FLIPPER = int
KX_ACTIONACT_LOOPEND = int
KX_ACTIONACT_LOOPSTOP = int
KX_ACTIONACT_PINGPONG = int
KX_ACTIONACT_PLAY = int
KX_ACTIONACT_PROPERTY = int
KX_ACT_ARMATURE_DISABLE = int
KX_ACT_ARMATURE_ENABLE = int
KX_ACT_ARMATURE_RUN = int
KX_ACT_ARMATURE_SETTARGET = int
KX_ACT_ARMATURE_SETWEIGHT = int
KX_ARMSENSOR_LIN_ERROR_ABOVE = int
KX_ARMSENSOR_LIN_ERROR_BELOW = int
KX_ARMSENSOR_ROT_ERROR_ABOVE = int
KX_ARMSENSOR_ROT_ERROR_BELOW = int
KX_ARMSENSOR_STATE_CHANGED = int
KX_CONSTRAINTACT_DIRNX = int
KX_CONSTRAINTACT_DIRNY = int
KX_CONSTRAINTACT_DIRNZ = int
KX_CONSTRAINTACT_DIRPX = int
KX_CONSTRAINTACT_DIRPY = int
KX_CONSTRAINTACT_DIRPZ = int
KX_CONSTRAINTACT_DISTANCE = int
KX_CONSTRAINTACT_DOROTFH = int
KX_CONSTRAINTACT_FHNX = int
KX_CONSTRAINTACT_FHNY = int
KX_CONSTRAINTACT_FHNZ = int
KX_CONSTRAINTACT_FHPX = int
KX_CONSTRAINTACT_FHPY = int
KX_CONSTRAINTACT_FHPZ = int
KX_CONSTRAINTACT_LOCAL = int
KX_CONSTRAINTACT_LOCX = int
KX_CONSTRAINTACT_LOCY = int
KX_CONSTRAINTACT_LOCZ = int
KX_CONSTRAINTACT_MATERIAL = int
KX_CONSTRAINTACT_NORMAL = int
KX_CONSTRAINTACT_ORIX = int
KX_CONSTRAINTACT_ORIY = int
KX_CONSTRAINTACT_ORIZ = int
KX_CONSTRAINTACT_PERMANENT = int
KX_CONSTRAINTACT_ROTX = int
KX_CONSTRAINTACT_ROTY = int
KX_CONSTRAINTACT_ROTZ = int
KX_DYN_DISABLE_DYNAMICS = int
KX_DYN_DISABLE_RIGID_BODY = int
KX_DYN_ENABLE_RIGID_BODY = int
KX_DYN_RESTORE_DYNAMICS = int
KX_DYN_SET_MASS = int
KX_FALSE = int
KX_GAME_LOAD = int
KX_GAME_LOADCFG = int
KX_GAME_QUIT = int
KX_GAME_RESTART = int
KX_GAME_SAVECFG = int
KX_GAME_START = int
KX_INPUT_ACTIVE = int
KX_INPUT_JUST_ACTIVATED = int
KX_INPUT_JUST_RELEASED = int
KX_INPUT_NONE = int
KX_IPOACT_FLIPPER = int
KX_IPOACT_FROM_PROP = int
KX_IPOACT_LOOPEND = int
KX_IPOACT_LOOPSTOP = int
KX_IPOACT_PINGPONG = int
KX_IPOACT_PLAY = int
KX_MOUSE_BUT_LEFT = int
KX_MOUSE_BUT_MIDDLE = int
KX_MOUSE_BUT_RIGHT = int
KX_PARENT_REMOVE = int
KX_PARENT_SET = int
KX_PROPSENSOR_CHANGED = int
KX_PROPSENSOR_EQUAL = int
KX_PROPSENSOR_EXPRESSION = int
KX_PROPSENSOR_INTERVAL = int
KX_PROPSENSOR_NOTEQUAL = int
KX_RADAR_AXIS_NEG_X = int
KX_RADAR_AXIS_NEG_Y = int
KX_RADAR_AXIS_NEG_Z = int
KX_RADAR_AXIS_POS_X = int
KX_RADAR_AXIS_POS_Y = int
KX_RADAR_AXIS_POS_Z = int
KX_RANDOMACT_BOOL_BERNOUILLI = int
KX_RANDOMACT_BOOL_CONST = int
KX_RANDOMACT_BOOL_UNIFORM = int
KX_RANDOMACT_FLOAT_CONST = int
KX_RANDOMACT_FLOAT_NEGATIVE_EXPONENTIAL = int
KX_RANDOMACT_FLOAT_NORMAL = int
KX_RANDOMACT_FLOAT_UNIFORM = int
KX_RANDOMACT_INT_CONST = int
KX_RANDOMACT_INT_POISSON = int
KX_RANDOMACT_INT_UNIFORM = int
KX_RAY_AXIS_NEG_X = int
KX_RAY_AXIS_NEG_Y = int
KX_RAY_AXIS_NEG_Z = int
KX_RAY_AXIS_POS_X = int
KX_RAY_AXIS_POS_Y = int
KX_RAY_AXIS_POS_Z = int
KX_SCENE_ADD_BACK_SCENE = int
KX_SCENE_ADD_FRONT_SCENE = int
KX_SCENE_REMOVE_SCENE = int
KX_SCENE_RESTART = int
KX_SCENE_RESUME = int
KX_SCENE_SET_CAMERA = int
KX_SCENE_SET_SCENE = int
KX_SCENE_SUSPEND = int
KX_SENSOR_ACTIVE = int
KX_SENSOR_INACTIVE = int
KX_SENSOR_JUST_ACTIVATED = int
KX_SENSOR_JUST_DEACTIVATED = int
KX_SOUNDACT_LOOPBIDIRECTIONAL = int
KX_SOUNDACT_LOOPBIDIRECTIONAL_STOP = int
KX_SOUNDACT_LOOPEND = int
KX_SOUNDACT_LOOPSTOP = int
KX_SOUNDACT_PLAYEND = int
KX_SOUNDACT_PLAYSTOP = int
KX_STATE1 = int
KX_STATE10 = int
KX_STATE11 = int
KX_STATE12 = int
KX_STATE13 = int
KX_STATE14 = int
KX_STATE15 = int
KX_STATE16 = int
KX_STATE17 = int
KX_STATE18 = int
KX_STATE19 = int
KX_STATE2 = int
KX_STATE20 = int
KX_STATE21 = int
KX_STATE22 = int
KX_STATE23 = int
KX_STATE24 = int
KX_STATE25 = int
KX_STATE26 = int
KX_STATE27 = int
KX_STATE28 = int
KX_STATE29 = int
KX_STATE3 = int
KX_STATE30 = int
KX_STATE4 = int
KX_STATE5 = int
KX_STATE6 = int
KX_STATE7 = int
KX_STATE8 = int
KX_STATE9 = int
KX_STATE_OP_CLR = int
KX_STATE_OP_CPY = int
KX_STATE_OP_NEG = int
KX_STATE_OP_SET = int
KX_TRUE = int
def LibFree(*argv):
	pass

def LibList(*argv):
	pass

def LibLoad(*argv):
	pass

def LibNew(*argv):
	pass

MODELMATRIX = int
MODELMATRIX_INVERSE = int
MODELMATRIX_INVERSETRANSPOSE = int
MODELMATRIX_TRANSPOSE = int
MODELVIEWMATRIX = int
MODELVIEWMATRIX_INVERSE = int
MODELVIEWMATRIX_INVERSETRANSPOSE = int
MODELVIEWMATRIX_TRANSPOSE = int
def PrintGLInfo(*argv):
	'''Prints GL Extension Info'''

def PrintMemInfo(*argv):
	'''Print engine stastics'''

RAS_2DFILTER_BLUR = int
RAS_2DFILTER_CUSTOMFILTER = int
RAS_2DFILTER_DILATION = int
RAS_2DFILTER_DISABLED = int
RAS_2DFILTER_ENABLED = int
RAS_2DFILTER_EROSION = int
RAS_2DFILTER_GRAYSCALE = int
RAS_2DFILTER_INVERT = int
RAS_2DFILTER_LAPLACIAN = int
RAS_2DFILTER_MOTIONBLUR = int
RAS_2DFILTER_NOFILTER = int
RAS_2DFILTER_PREWITT = int
RAS_2DFILTER_SEPIA = int
RAS_2DFILTER_SHARPEN = int
RAS_2DFILTER_SOBEL = int
ROT_MODE_QUAT = int
ROT_MODE_XYZ = int
ROT_MODE_XZY = int
ROT_MODE_YXZ = int
ROT_MODE_YZX = int
ROT_MODE_ZXY = int
ROT_MODE_ZYX = int
SHD_TANGENT = int
VIEWMATRIX = int
VIEWMATRIX_INVERSE = int
VIEWMATRIX_INVERSETRANSPOSE = int
VIEWMATRIX_TRANSPOSE = int
def addScene(*argv):
	'''addScene(name, [overlay])
adds a scene to the game engine
name = Name of the scene
overlay = Overlay or underlay'''

def endGame(*argv):
	'''endGame()
Ends the current game'''

error = str
def expandPath(*argv):
	'''(path) - Converts a blender internal path into a proper file system path.
path - the string path to convert.

Use / as directory separator in path
You can use '//' at the start of the string to define a relative path;
Blender replaces that string by the directory of the startup .blend or runtime
file to make a full path name (doesn't change during the game, even if you load
other .blend).
The function also converts the directory separator to the local file system format.'''

def getAverageFrameRate(*argv):
	'''Gets the estimated average frame rate'''

def getBlendFileList(*argv):
	'''Gets a list of blend files in the same directory as the current blend file'''

def getCurrentController(*argv):
	'''getCurrentController()'''

def getCurrentScene(*argv):
	'''getCurrentScene()
Gets a reference to the current scene.'''

def getLogicTicRate(*argv):
	'''Gets the logic tic rate'''

def getMaxLogicFrame(*argv):
	'''Gets the max number of logic frame per render frame'''

def getMaxPhysicsFrame(*argv):
	'''Gets the max number of physics frame per render frame'''

def getPhysicsTicRate(*argv):
	'''Gets the physics tic rate'''

def getRandomFloat(*argv):
	'''getRandomFloat returns a random floating point value in the range [0..1]'''

def getSceneList(*argv):
	'''getSceneList()
Return a list of converted scenes.'''

def getSpectrum(*argv):
	'''get audio spectrum'''

globalDict = dict
keyboard = SCA_PythonKeyboard
def loadGlobalDict(*argv):
	'''LoadGlobalDict()
Loads bge.logic.globalDict from a file'''

mouse = SCA_PythonMouse
def restartGame(*argv):
	'''restartGame()
Restarts the current game by reloading the .blend file'''

def saveGlobalDict(*argv):
	'''saveGlobalDict()
Saves bge.logic.globalDict to a file'''

def sendMessage(*argv):
	'''sendMessage(subject, [body, to, from])
sends a message in same manner as a message actuatorsubject = Subject of the messagebody = Message bodyto = Name of object to send the message tofrom = Name of object to send the string from'''

def setGravity(*argv):
	'''set Gravitation'''

def setLogicTicRate(*argv):
	'''Sets the logic tic rate'''

def setMaxLogicFrame(*argv):
	'''Sets the max number of logic frame per render frame'''

def setMaxPhysicsFrame(*argv):
	'''Sets the max number of physics farme per render frame'''

def setPhysicsTicRate(*argv):
	'''Sets the physics tic rate'''

def startGame(*argv):
	'''startGame(blend)
Loads the blend file'''


